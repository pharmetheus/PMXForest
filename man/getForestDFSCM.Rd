% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getForestDFSCM.R
\name{getForestDFSCM}
\alias{getForestDFSCM}
\title{getForestDFSCM}
\usage{
getForestDFSCM(dfCovs, cdfCovsNames = NULL,
  functionList = list(function(basethetas, dfrow, ...) {    
  return(basethetas[1]) }), functionListName = "PAR1", noBaseThetas,
  dfParameters, quiet = TRUE, probs = c(0.025, 0.5, 0.975),
  dfRefRow = NULL, cGrouping = NULL, fixedSpacing = TRUE,
  groupdist = 0.3, withingroupdist = 0.35, ncores = 1,
  cstrPackages = NULL, cstrExports = NULL, iMiss = -99, ...)
}
\arguments{
\item{dfCovs}{A data frame with covariates to include, if a covariate value is set -99 or NA,
they are assumed missing and will not be included in any FFEM transformations. If a dfCovs is
a list an attempt will be made to create the appropriate data frame with the createInputForestData function.}

\item{cdfCovsNames}{A string vector with names of the rows in dfCovs, if not used, names will be
automatically assigned based on the covariate values and column names in dfCovs.}

\item{functionList}{A list of functions with input (basethetas, covthetas,dfrow and ...) from which the change
from the reference value will be calculated. If the function returns a vector of values, each value will be used
but functionListName must contain the names with a length of all return for all functions in the functionList}

\item{functionListName}{A vector of strings (names) of the parameters for each function in the functionList}

\item{noBaseThetas}{the number of structural thetas in the model}

\item{dfParameters}{A data frame with parameter samples from the uncertainty distribution.
The vector of final parameter estimates is assumed to be in the first row.
The column order is assumed the same as in the NONMEM ext file except the ITERATION and OBJ columns whichshould not be included.}

\item{quiet}{If output should be allowed during the function call, default= TRUE. (This option is mainly for debugging purposes.)}

\item{probs}{A vector of probabilities that should be computed for each of the parameters from functionList. These will be used as the
as the uncertainties in the Forest plots. Make sure to include the median, i.e. 0.5.}

\item{dfRefRow}{A data frame (one row) with the covariate values that will be used as the reference, if NULL the typical subject is used as reference.}

\item{cGrouping}{A vector of numbers definig how to group the y-axis of the Forest plot, the length of the vector should match the number of rows in dfCovs.
If NULL (default) an educated guess of the grouping will be set}

\item{fixedSpacing}{A boolean (TRUE/FALSE) if fixed spacing between covariate groups should be used in the Forest plot. Default is TRUE.
If FALSE, the y coordinates are calculated relative to the number of groups and numbers of covariates within a group.
If fixed spacing is used, groupdist and withingroupdist will be used as well.}

\item{ncores}{the number of cores to use for the calculations, default = 1 which means no parallellization}

\item{cstrPackages}{a character vector with package names needed to run the calculations in parallel, default = NULL}

\item{cstrExports}{a character vector with variables needed to run the calculations in parallel, default = NULL}

\item{iMiss}{The missing value number. -99 by default.}

\item{...}{additional variables to be forwarded to the the functionList functions}

\item{groupeddist}{A number defining the y distance between groups of covariates.}

\item{withingroupeddist}{A number defining the y distance within groups of covariates.}
}
\value{
A data frame with summary statistics for each parameters and covariate combinations:
}
\description{
Get a data frame with Forest border for each univariate or multivariate covariate (and value(s)) in the input data frame. If a list a data frame will be created from the list, see function dfCreateInputForestData
}
\examples{
\dontrun{
dfresCOV <- getForestDFSCM(
            dfCovs = dfCovs1,
            cdfCovsNames = covnames,
            functionList = list(paramFunction),
            functionListName = functionListName,
            noBaseThetas = 16,
            dfParameters = dfSamplesCOV,
            probs = c(0.05, 0.5, 0.95),
            dfRefRow = dfRefRow,
            quiet = TRUE,
            groupdist = 0.3,
            withingroupdist = 0.2)
}
}
